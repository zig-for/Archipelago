From b9aa07d24acb7a864657d29fbc176ef021881458 Mon Sep 17 00:00:00 2001
From: Daid <daid303@gmail.com>
Date: Mon, 26 Jun 2023 21:17:42 +0200
Subject: [PATCH] Fix having bowwow and marin at the same time being a broken
 mess.

---
 generator.py      |  1 +
 patches/bowwow.py | 63 +++++++++++++++++++++++++++++--------------------------
 2 files changed, 34 insertions(+), 30 deletions(-)

diff --git a/generator.py b/generator.py
index e1f9b1d..6d7c234 100644
--- a/generator.py
+++ b/generator.py
@@ -82,6 +82,7 @@ def generateRom(args, settings, seed, logic, *, rnd=None, multiworld=None):
     assembler.const("wGoldenLeaves", 0xDB42)  # New memory location where to store the golden leaf counter
     assembler.const("wCollectedTunics", 0xDB6D)  # Memory location where to store which tunic options are available
     assembler.const("wCustomMessage", 0xC0A0)
+    assembler.const("wBowwowChain", 0xD1E0)  # Need $1A bytes for the chain and other bowwow related memory
 
     # We store the link info in unused color dungeon flags, so it gets preserved in the savegame.
     assembler.const("wLinkSyncSequenceNumber", 0xDDF6)
diff --git a/patches/bowwow.py b/patches/bowwow.py
index 33483ec..d903229 100644
--- a/patches/bowwow.py
+++ b/patches/bowwow.py
@@ -41,38 +41,38 @@ def fixBowwow(rom, everywhere=False):
     rom.patch(0x00, 0x2EB0, ASM("ld a, [$DB56]\ncp $01\nld a, $A4\njr z, $18"), "", fill_nop=True)
 
     # Patch the location where bowwow stores chain X/Y positions so it does not conflict with a lot of other things
-    rom.patch(0x05, 0x00BE, ASM("ld hl, $D100"), ASM("ld hl, $D180"))
-    rom.patch(0x05, 0x0275, ASM("ld hl, $D100"), ASM("ld hl, $D180"))
-    rom.patch(0x05, 0x03AD, ASM("ld [$D100], a"), ASM("ld [$D180], a"))
-    rom.patch(0x05, 0x03BD, ASM("ld de, $D100"), ASM("ld de, $D180"))
-    rom.patch(0x05, 0x049F, ASM("ld hl, $D100"), ASM("ld hl, $D180"))
-    rom.patch(0x05, 0x04C2, ASM("ld a, [$D100]"), ASM("ld a, [$D180]"))
-    rom.patch(0x05, 0x03C0, ASM("ld hl, $D101"), ASM("ld hl, $D181"))
-    rom.patch(0x05, 0x0418, ASM("ld [$D106], a"), ASM("ld [$D186], a"))
-    rom.patch(0x05, 0x0423, ASM("ld de, $D106"), ASM("ld de, $D186"))
-    rom.patch(0x05, 0x0426, ASM("ld hl, $D105"), ASM("ld hl, $D185"))
-
-    rom.patch(0x19, 0x3A4E, ASM("ld hl, $D100"), ASM("ld hl, $D180"))
-    rom.patch(0x19, 0x3A5A, ASM("ld hl, $D110"), ASM("ld hl, $D190"))
-
-    rom.patch(0x05, 0x00D9, ASM("ld hl, $D110"), ASM("ld hl, $D190"))
-    rom.patch(0x05, 0x026E, ASM("ld hl, $D110"), ASM("ld hl, $D190"))
-    rom.patch(0x05, 0x03BA, ASM("ld [$D110], a"), ASM("ld [$D190], a"))
-    rom.patch(0x05, 0x03DD, ASM("ld de, $D110"), ASM("ld de, $D190"))
-    rom.patch(0x05, 0x0480, ASM("ld hl, $D110"), ASM("ld hl, $D190"))
-    rom.patch(0x05, 0x04B5, ASM("ld a, [$D110]"), ASM("ld a, [$D190]"))
-    rom.patch(0x05, 0x03E0, ASM("ld hl, $D111"), ASM("ld hl, $D191"))
-    rom.patch(0x05, 0x0420, ASM("ld [$D116], a"), ASM("ld [$D196], a"))
-    rom.patch(0x05, 0x044d, ASM("ld de, $D116"), ASM("ld de, $D196"))
-    rom.patch(0x05, 0x0450, ASM("ld hl, $D115"), ASM("ld hl, $D195"))
+    rom.patch(0x05, 0x00BE, ASM("ld hl, $D100"), ASM("ld hl, wBowwowChain"))
+    rom.patch(0x05, 0x0275, ASM("ld hl, $D100"), ASM("ld hl, wBowwowChain"))
+    rom.patch(0x05, 0x03AD, ASM("ld [$D100], a"), ASM("ld [wBowwowChain], a"))
+    rom.patch(0x05, 0x03BD, ASM("ld de, $D100"), ASM("ld de, wBowwowChain"))
+    rom.patch(0x05, 0x049F, ASM("ld hl, $D100"), ASM("ld hl, wBowwowChain"))
+    rom.patch(0x05, 0x04C2, ASM("ld a, [$D100]"), ASM("ld a, [wBowwowChain]"))
+    rom.patch(0x05, 0x03C0, ASM("ld hl, $D101"), ASM("ld hl, wBowwowChain + 1"))
+    rom.patch(0x05, 0x0418, ASM("ld [$D106], a"), ASM("ld [wBowwowChain + 6], a"))
+    rom.patch(0x05, 0x0423, ASM("ld de, $D106"), ASM("ld de, wBowwowChain + 6"))
+    rom.patch(0x05, 0x0426, ASM("ld hl, $D105"), ASM("ld hl, wBowwowChain + 5"))
+
+    rom.patch(0x19, 0x3A4E, ASM("ld hl, $D100"), ASM("ld hl, wBowwowChain"))
+    rom.patch(0x19, 0x3A5A, ASM("ld hl, $D110"), ASM("ld hl, wBowwowChain + $10"))
+
+    rom.patch(0x05, 0x00D9, ASM("ld hl, $D110"), ASM("ld hl, wBowwowChain + $10"))
+    rom.patch(0x05, 0x026E, ASM("ld hl, $D110"), ASM("ld hl, wBowwowChain + $10"))
+    rom.patch(0x05, 0x03BA, ASM("ld [$D110], a"), ASM("ld [wBowwowChain + $10], a"))
+    rom.patch(0x05, 0x03DD, ASM("ld de, $D110"), ASM("ld de, wBowwowChain + $10"))
+    rom.patch(0x05, 0x0480, ASM("ld hl, $D110"), ASM("ld hl, wBowwowChain + $10"))
+    rom.patch(0x05, 0x04B5, ASM("ld a, [$D110]"), ASM("ld a, [wBowwowChain + $10]"))
+    rom.patch(0x05, 0x03E0, ASM("ld hl, $D111"), ASM("ld hl, wBowwowChain + $11"))
+    rom.patch(0x05, 0x0420, ASM("ld [$D116], a"), ASM("ld [wBowwowChain + $16], a"))
+    rom.patch(0x05, 0x044d, ASM("ld de, $D116"), ASM("ld de, wBowwowChain + $16"))
+    rom.patch(0x05, 0x0450, ASM("ld hl, $D115"), ASM("ld hl, wBowwowChain + $15"))
 
     rom.patch(0x05, 0x0039, ASM("ld [$D154], a"), "", fill_nop=True)  # normally this stores the index to bowwow, for the kiki fight
-    rom.patch(0x05, 0x013C, ASM("ld [$D150], a"), ASM("ld [$D197], a"))
-    rom.patch(0x05, 0x0144, ASM("ld [$D151], a"), ASM("ld [$D198], a"))
-    rom.patch(0x05, 0x02F9, ASM("ld [$D152], a"), ASM("ld [$D199], a"))
-    rom.patch(0x05, 0x0335, ASM("ld a, [$D152]"), ASM("ld a, [$D199]"))
-    rom.patch(0x05, 0x0485, ASM("ld a, [$D151]"), ASM("ld a, [$D198]"))
-    rom.patch(0x05, 0x04A4, ASM("ld a, [$D150]"), ASM("ld a, [$D197]"))
+    rom.patch(0x05, 0x013C, ASM("ld [$D150], a"), ASM("ld [wBowwowChain + $17], a"))
+    rom.patch(0x05, 0x0144, ASM("ld [$D151], a"), ASM("ld [wBowwowChain + $18], a"))
+    rom.patch(0x05, 0x02F9, ASM("ld [$D152], a"), ASM("ld [wBowwowChain + $19], a"))
+    rom.patch(0x05, 0x0335, ASM("ld a, [$D152]"), ASM("ld a, [wBowwowChain + $19]"))
+    rom.patch(0x05, 0x0485, ASM("ld a, [$D151]"), ASM("ld a, [wBowwowChain + $18]"))
+    rom.patch(0x05, 0x04A4, ASM("ld a, [$D150]"), ASM("ld a, [wBowwowChain + $17]"))
 
     # Patch the bowwow create code to call our custom check of we are in swamp function.
     if everywhere:
@@ -102,6 +102,9 @@ def fixBowwow(rom, everywhere=False):
 Continue:
         """), fill_nop=True)
 
+    # Patch marin follower code to also call bowwow follower after it is done
+    rom.patch(0x01, 0x2103, ASM("jr z, $12\nldh a, [$FF98]"), ASM("jp $611F"), fill_nop=True)
+
     # Patch madam meow meow to not take bowwow
     rom.patch(0x06, 0x1BD7, ASM("ld a, [$DB66]\nand $02"), ASM("ld a, $00\nand $02"), fill_nop=True)
 
-- 
2.14.1.windows.1

